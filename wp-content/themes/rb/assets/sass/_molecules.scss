/* Groups of atoms which function together as a unit
  -  “do one thing and do it well” 
*/


/* Navigational elements
*/






/* Grid elements
  - the $width is coming from the layer above, organisms
*/

@mixin m_container($width : null) {
  width: $width;
  margin: 0 auto;
}

/* Left aligned column
*/
@mixin m_column($width, $margin: 0) {
  width: $width;
  margin-right: $margin;
  float: left;
}


/* Columns for Isotope
  - since Isotope filters out elements we don't know which element will be the last in a row, so we can't make it's righ margin 0
  - in this grid all elements in a row will have the same right margin
*/
@mixin isotope($how-many, $maximum : 10) {
  @include m_column(isotope-col-width($how-many), isotope-col-gutter($how-many));
  @include col-right-margin(0, isotope-col-gutter($how-many), $maximum);
  
  @include below-and-small-screen {
    @include m_column(isotope-col-width(3), isotope-col-gutter(3));
    @include col-right-margin(0, isotope-col-gutter(3), $maximum);
  }
  
  @include below-tablet {
    @include m_column(isotope-col-width(2), isotope-col-gutter(2));
    @include col-right-margin(0, isotope-col-gutter(2), $maximum);
  }
  
  @include mobile {
    @include m_column(100%, 0);
  }
}

/* Columns for the grid
  - calculates automatically the columns size and margin
  - the right margin of the last element in a row is set to zero
  - $maximum sets how many articles will be displayed on a single page 
*/
@mixin col($how-many, $maximum : 10) {
  @include grid($how-many, $maximum);
  
  @include below-and-small-screen {
    @include grid(3, $maximum);
  }
  
  @include below-tablet {
    @include grid(2, $maximum);
  }
  
  @include mobile {
    @include m_column(100%, 0);
  }
}

/* Returns the with of a column in a grid
  - This is useful to resize other elements to the grid
  - The formula is taken and must be in sync with the mixin col
*/
@function col-width($how-many) {
  @return 90% / $how-many;
}

/* Returns the margin of a column in a grid
*/
@function col-gutter($how-many) {
  @return 10% / ($how-many - 1);
}

@function isotope-col-width($how-many) {
  $modulo: 100 % $how-many;
  $divident: round(100 / $how-many);
  
  @if ($modulo == 0) {
    /* The margin will be the 10% of the column width
      - in a 5 column grid we would have width=18%, margin=2%
      - since isotope cannot handle this 100% full row (?) we will have to reduce column with with 1% to 17%
    */
    $gutter: $divident / 10;
    $column-width: $divident - $gutter - 1;
    @return percentage($column-width/100);
  } @else {
    $gutter: $modulo;
    $column-width: $divident - $gutter;
    @return percentage($column-width/100);
  }
}

@function isotope-col-gutter($how-many) {
  $modulo: 100 % $how-many;
  $divident: round(100 / $how-many);
  
  @if ($modulo == 0) {
    /* The margin will be the 10% of the column width
      - in a 5 column grid we would have width=18%, margin=2%
      - since isotope cannot handle this 100% full row (?) we will have to reduce column with with 1% to 17%
    */
    $gutter: $divident / 10;
    @return percentage($gutter/100);
  } @else {
    $gutter: $modulo;
    @return percentage($gutter/100);
  }
}

/* Generates a full grid of $how-many columns and $maximum elements
*/
@mixin grid($how-many, $maximum) {
  $gutter: col-gutter($how-many);
  
  @include m_column(col-width($how-many), $gutter);
  @include col-right-margin($how-many, $gutter, $maximum);
}

/* Remove right margin of the last element in a row of a grid
  - the non-last elements will have the righ margin set again required by responsive layouts
*/
@mixin col-right-margin($how-many, $gutter, $maximum) {
  @for $i from 2 through $maximum {
    @if (($how-many != 0) and (($i % $how-many) == 0)) {
      &:nth-of-type(#{$i}) {
         margin-right: 0;
      }
    } @else {
      &:nth-of-type(#{$i}) {
         margin-right: $gutter;
      }
    }
  }
}

/* When decorations and padding is added to a column in a grid these must be removed from the original column width
  - params can be any of %, em, px
*/
@function col-resize($width: 100%, $padding: 0, $border: 0) {
  @return calc(#{$width} - #{$padding} - #{$border});
}




/* Typographic elements
*/

@mixin address {
  address {
    font-size: small;
    color: $gray;
    max-width: $body-text-width / 2;
  }
}

@mixin q {
  blockquote, q {
    
    border-top: 1px solid;
    border-bottom: 1px solid;
    
    /* Making room to the " sign 
    */
    position: relative;
    float: left;
    padding: $pad*10 0 $pad*2 $pad*4;
    
    
    /* Fill the parent block
    */
    @include block;
    text-align: right;
    width: calc(#{$body-text-width} - #{$pad*4});
    
    /*
    @include below-and-small-screen {
      width: calc(100% - #{$pad*4});
    }
    */
    
    &:before {
      content: '\201C';
      font-size: 1400%;
      
      position: absolute;
      top: 0;
      left: 0;
    }
  }
}

/* Select box
  - put <select> inside a <label class="select">
  - label:after is positioned over the original selectbox arrow
  - label after must have a background color to hide the default arrow
*/

@mixin select {    
  label.select {
    &:after {
      content: $arrow-down;
      @include transform(rotate(90deg));
      float: right;
      
      display: inline-block;
      position: relative;
      padding: 0;
      left: -$pad/4;
      background: $background;
      font-size: 150%;
      top: -$pad;
      
      pointer-events: none; /* this is a must */
      cursor: pointer;
    }
  }
  
  select {
    @include reset-form;
    border: 1px solid;
    cursor: pointer;
    width: 100%;
    padding: $pad/4;
  }
}

@mixin reset-form {
  border: none;
  outline: 0;
  background: $background;

  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
}

@mixin form {
  form {
    
    /* Reset */
    input, textarea, select {
	    @include reset-form;
    }
    

    /* Text */
    input[type='text'], input[type='email'], input[type='password'], textarea {
	    border: 1px solid $color;
	    font-style: italic;
    }
    

    /* Button */
    input[type='submit'] {	
      @include uppercase;	
	    border: 1px solid $color;
	    cursor: pointer;
	    
	    @include transition($easing);
	    &:hover {
	      background: $highlight;
	    }
    }
    
    /* Stretching and padding */
    label, input, textarea {
      @include block;
    }
    
    input, textarea {
      padding: $list-pad;
      width: calc(100% - #{$list-pad*2});
    }
  }
}


@mixin figure($width: auto) {
  figure {
    img {
      @include box-shadow($shadow);
      width: $width;
    }
    
    figcaption {
      font-size: smaller;
    }
  }
}



@mixin table {
  table {
    width: 100%;
    display: table !important;
    
    thead {
      @include color(invert);
    }
    
    thead th, tbody td {
      padding: $pad;
      padding-left: 0;
    }
    
    tbody {
      td {
        border-bottom: 1px solid $gray;
      }
    }
  }
}

/* <dl>
*/
@mixin dl {
  dl {
    dt {
      @include h2;
    }
  }
}




/* <ul> and <ol> lists
  - they display a custom bullet / number via $before
  - the text of the list is aligned right related to the bullet / number
*/
@mixin ol-ul($before : null) {
  list-style: none outside;
  
  li {
    /* When parent positioned to 'relative' the children (:before) can be positioned to 'absolute'
      - this way we can perfectly align the bullets / numbering to the list content
    */
    position: relative;
    padding-left: $pad;
    
    &:before {
      content: $before;
      
      /* making the content of the list perfectly align with numbering
        - <li> is relatively positioned
        - :the numbering (:before) is aboslutely positioned within <li> and fixed to left
        - the the <li> content has a padding-left to not overlap the numbering
      */
      position: absolute;
      left: 0;
    }
  }
}

@mixin ul {
  ul {
    @include ol-ul('\271A');
  }
}

@mixin ol {
  ol {
    @include ol-ul;
    counter-reset: ol-counter;
    
    li {
      counter-increment: ol-counter;
      
      &:before {
        content: counter(ol-counter, decimal);
      }
    }
  }
}



/* Set links
*/
@mixin link($c: $color) {
  color: $c;
  text-decoration: none;
  outline: 0;
  @include uppercase;
  
  @include transition($easing);
  &:hover, &:focus {
    color: $highlight;
  }
}



/* Set the font-size and decoration for headings
  - These setting will be used universally, inside a body text or let's say in the header
*/

@mixin headings {
  h1, h2, h3 {
    @include font-size($h1);
    font-weight: normal;
    line-height: $line-height-headings;
  }
  
  h1 {
    font-weight: bold;
  }
  
  h2 {
    @include uppercase;
  }
  
  h4, h5, h6 {
    @include font-size(1, larger);
  }
}

/* The <dt> in <dl> can look look like a <h1>, <h2> or <h3>
*/
@mixin h1 {
  @include font-size($h1);
  font-weight: bold;
}
@mixin h2 {
  @include font-size($h1);
  font-weight: normal;
  @include uppercase;
}
@mixin h3 {
  @include font-size($h1);
  font-weight: normal;
}
@mixin h4 {
  @include font-size(1, larger);
  font-weight: normal;
}
@mixin font-normal {
  @include font-size(1);
  font-weight: normal;
  text-transform: none;
  letter-spacing: 0;
}




/* When uppercasing fonts the letter spacing must be enlarged */
@mixin uppercase {
  text-transform: uppercase;
  letter-spacing: $letter-spacing;
}


@mixin font {
  font-size: $font-size;
  line-height: $line-height;
  
  font-family: $font-family-primary;
  @include headings;
}


/* Set the font size
  - 'body' goes from non text elements, it is the default setting put in <body>
  - 'text' goes for long texts like blog posts, articles, etc;
  - 'headings' goes for <h1>, etc
*/
@mixin line-height($type) {
  @if ($type == body) {
    line-height: $line-height;
  } @elseif ($type == text) {
    line-height: $line-height-body-text;
  } @elseif ($type == headings) {
    line-height: $line-height-headings;
  }
}


/* Set the background and font color
  - 'invert' inverts this color scheme
*/
@mixin color($type : normal) {
  @if ($type == normal) {
    background: $background;
    color: $color;
  } @elseif ($type == invert) {
    background: $color;
    color: $background;
    a {
      color: $background;
    }
  } @elseif ($type == highlight) {
    background: $background;
    color: $highlight;
  }
}






/* Various mixins
*/


/* Draws a CSS circle around something
*/
@mixin circle($size) {
  width: $size;
  height: $size;
  @include border-radius($size/2);
  border: 1px solid;
  text-align: center;
}


@mixin fluid-image {
  max-width: 100%;
  height: auto;
}

@mixin full-width-image {
  width: 100%;
}


/* An inline list
*/
@mixin list-inline {
  margin: 0;
  display: block;
  list-style-type: none;
  
  li {
    display: inline-block;
    float: left;
    margin-right: $pad;
    
    &:last-of-type {
      margin-right: 0;
    }
  }
}

/* A normal list (A reset of list inline)
*/
@mixin list-normal {
  @include block;
  
  li {
    display: block;
    margin-right: 0;
    float: none;
  }
}

/* Stretching child element to fill parent's width
*/
@mixin block {
  width: 100%;
  float: left;
}


/* Rem Unit font sizes with relative fallback http:/seesparkbox.com/foundry/scss_rem_mixin_now_with_a_better_fallback  
	Usage: @include font-size(1, large);
*/
@mixin font-size( $decimal-size, $keyword: null ) {
  @if $keyword { 
    font-size: $keyword; 
  } @else { 
    font-size: $decimal-size * $base-font-multiplier * 16px;
    font-size: $decimal-size * 1rem;
  }
}
